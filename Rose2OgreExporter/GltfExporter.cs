using Assimp;using Assimp.Export;using Revise.ZMD;using Revise.ZMO;using Revise.ZMS;using System;using System.Collections.Generic;using System.IO;using System.Numerics;namespace Rose2OgreExporter{public class GltfExporter{public static void Export(Skeleton skeleton, List<Motion> motions, List<Mesh> meshes, string up, string outputPath){var scene = new Scene();var rootNode = new Node("Root");scene.RootNode = rootNode;var material = new Material{Name = "DefaultMaterial"};scene.Materials.Add(material);var assimpMesh = new Assimp.Mesh("DefaultMesh", PrimitiveType.Triangle);assimpMesh.MaterialIndex = 0;foreach (var mesh in meshes){foreach (var vertex in mesh.Vertices){assimpMesh.Vertices.Add(new Vector3D(vertex.Position.X, vertex.Position.Y, vertex.Position.Z));assimpMesh.Normals.Add(new Vector3D(vertex.Normal.X, vertex.Normal.Y, vertex.Normal.Z));assimpMesh.TextureCoordinateChannels[0].Add(new Vector3D(vertex.UV.X, vertex.UV.Y, 0));}for (int i = 0; i < mesh.Indices.Length; i += 3){assimpMesh.Faces.Add(new Face(new int[] { mesh.Indices[i], mesh.Indices[i + 1], mesh.Indices[i + 2] }));}foreach (var bone in skeleton.Bones){var assimpBone = new Assimp.Bone{Name = bone.Name};for (int i = 0; i < mesh.Vertices.Length; i++){for (int j = 0; j < mesh.Vertices[i].BoneIndices.Length; j++){if (mesh.Vertices[i].BoneIndices[j] == Array.IndexOf(skeleton.Bones, bone)){assimpBone.VertexWeights.Add(new VertexWeight(i, mesh.Vertices[i].BoneWeights[j]));}}}assimpMesh.Bones.Add(assimpBone);}}scene.Meshes.Add(assimpMesh);rootNode.MeshIndices.Add(0);foreach (var motion in motions){var animation = new Assimp.Animation{Name = Path.GetFileNameWithoutExtension(motion.FileName),DurationInTicks = motion.Frames,TicksPerSecond = motion.FPS};for (int i = 0; i < skeleton.Bones.Length; i++){var channel = new NodeAnimationChannel{NodeName = skeleton.Bones[i].Name};for (int j = 0; j < motion.Frames; j++){var position = motion.Channels[i].PositionFrames[j].Value;channel.PositionKeys.Add(new VectorKey(j, new Vector3D(position.X, position.Y, position.Z)));}for (int j = 0; j < motion.Frames; j++){var rotation = motion.Channels[i].RotationFrames[j].Value;channel.RotationKeys.Add(new QuaternionKey(j, new Assimp.Quaternion(rotation.W, rotation.X, rotation.Y, rotation.Z)));}animation.NodeAnimationChannels.Add(channel);}scene.Animations.Add(animation);}var upVector = up.ToUpper() switch{"X" => Vector3.UnitX,"Y" => Vector3.UnitY,"Z" => Vector3.UnitZ,_ => Vector3.UnitY,};var transform = Matrix4x4.CreateLookAt(Vector3.Zero, upVector, Vector3.UnitZ);scene.RootNode.Transform = new Matrix4x4(transform.M11, transform.M12, transform.M13, transform.M14,transform.M21, transform.M22, transform.M23, transform.M24,transform.M31, transform.M32, transform.M33, transform.M34,transform.M41, transform.M42, transform.M43, transform.M44);var exportFormat = "gltf2";var exporter = new AssimpExporter();exporter.Export(scene, exportFormat, outputPath);}}}
